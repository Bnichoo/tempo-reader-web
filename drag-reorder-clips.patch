# 1) Save this patch to a file
$patch = "drag-reorder-clips.patch"
Set-Content -Path $patch -Value @'
diff --git a/src/App.tsx b/src/App.tsx
index 0000000..0000000 100644
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -1,6 +1,7 @@
 import React, { useCallback, useEffect, useMemo, useRef, useState } from "react";
 import { Reader } from "./components/Reader";
 import { useTokenizer } from "./lib/useTokenizer";
+// DnD patch: adds dragId, dragOverId, and reorderClipsWithinGroup; augments <li> in clips list.
 
@@
   const filteredClips = useMemo(() => {
     const q = query.trim().toLowerCase();
     const list = q
@@
     return withPos.map((x) => x.c);
   }, [clips, query]);
 
+  /* ------- Drag & Drop (within-group) ------- */
+  const [dragId, setDragId] = useState<string | null>(null);
+  const [dragOverId, setDragOverId] = useState<string | null>(null);
+  const reorderClipsWithinGroup = useCallback((drag: string, drop: string) => {
+    setClips(prev => {
+      const dragIx = prev.findIndex(c => c.id === drag);
+      const dropIx = prev.findIndex(c => c.id === drop);
+      if (dragIx < 0 || dropIx < 0) return prev;
+      const sameGroup = (!!prev[dragIx].pinned) === (!!prev[dropIx].pinned);
+      if (!sameGroup) return prev; // block cross-group moves for now
+      const next = prev.slice();
+      const [item] = next.splice(dragIx, 1);
+      const insertIx = next.findIndex(c => c.id === drop);
+      next.splice(insertIx, 0, item);
+      return next;
+    });
+  }, []);
+
@@
-                      ) : (
-                        <ul className="space-y-3">
-                          {(query ? filteredClips : clips).map((c) => (
-                            <li
-                              key={c.id}
-                              className="clip-card p-3 rounded-xl border border-sepia-200 hover:bg-sepia-50"
-                              onMouseEnter={() =>
-                                setHoverRange({ start: c.start, length: c.length })
-                              }
-                              onMouseLeave={() => setHoverRange(null)}
-                            >
+                      ) : (
+                        <ul className="space-y-3">
+                          {(query ? filteredClips : clips).map((c) => (
+                            <li
+                              key={c.id}
+                              className={
+                                "clip-card p-3 rounded-xl border border-sepia-200 hover:bg-sepia-50 " +
+                                (dragOverId === c.id ? "drag-over " : "") +
+                                (dragId === c.id ? "dragging " : "")
+                              }
+                              onMouseEnter={() => setHoverRange({ start: c.start, length: c.length })}
+                              onMouseLeave={() => setHoverRange(null)}
+                              draggable={!query}
+                              aria-grabbed={dragId === c.id}
+                              onDragStart={(e) => {
+                                setDragId(c.id);
+                                try {
+                                  e.dataTransfer.effectAllowed = "move";
+                                  e.dataTransfer.setData("text/plain", c.id);
+                                } catch {}
+                              }}
+                              onDragOver={(e) => {
+                                if (query) return; // disable DnD while filtered
+                                e.preventDefault(); // allow drop
+                                if (dragOverId !== c.id) setDragOverId(c.id);
+                              }}
+                              onDragLeave={() => {
+                                setDragOverId(d => (d === c.id ? null : d));
+                              }}
+                              onDrop={(e) => {
+                                if (query) return;
+                                e.preventDefault();
+                                const src = e.dataTransfer.getData("text/plain") || dragId || "";
+                                if (src && src !== c.id) reorderClipsWithinGroup(src, c.id);
+                                setDragId(null);
+                                setDragOverId(null);
+                              }}
+                              onDragEnd={() => {
+                                setDragId(null);
+                                setDragOverId(null);
+                              }}
+                            >
                               <div className="clip-actions">
                                 <button onClick={() => togglePin(c.id)}>
                                   {c.pinned ? "Unpin" : "Pin"}
diff --git a/src/index.css b/src/index.css
index 0000000..0000000 100644
--- a/src/index.css
+++ b/src/index.css
@@ -1,3 +1,9 @@
 /* your existing styles aboveâ€¦ */
+
+/* --- Drag & drop feedback for clips --- */
+.clip-card.drag-over{
+  outline:2px dashed #c9b48a; outline-offset:2px;
+}
+.clip-card.dragging{ opacity:.6; }
'@
# 2) Apply it
git apply --whitespace=fix $patch
